"0","# Functions"
"0","gamma_y1 <- which(y==1) # position of y=1"
"0","gamma_y0 <- (1:n)[-gamma_y1] # position of y=0"
"0","# log.likelihd.der is the first derivative of log-likelihood function of"
"0","# l(theta_j): u_j(theta_j) in Eq.(1.3). The input ""theta"" is vectorized."
"0","# psi is a vector consisting of psi_i(theta_j)'s for all j's. "
"0","log.likelihd.der <- function(theta) {"
"0","  psi <- x.hat.theta + X_r * rep(theta, rep(n,hat.G0.t.len))"
"0","  pi_r <- 1/(1+exp(-psi)) "
"0","  f <- colSums(X_r[gamma_y1,]*(1-pi_r[gamma_y1,])) - "
"0","    colSums(X_r[gamma_y0,]*pi_r[gamma_y0,]) - theta/lambda"
"0","  return(f)"
"0","}"
"0","# log of approximate marginal posterior likelihood function "
"0","# for nbd+:log(\tilde S(r)) in Eq.(1.6)"
"0","log.tilde.S.plus <- function(theta) {"
"0","  psi <- x.hat.theta + X_r * rep(theta, rep(n,hat.G0.t.len))"
"0","  f = colSums(psi[gamma_y1,])- colSums(log(1+exp(psi))) - "
"0","    0.5/lambda*(rep(crossprod(hat.theta.t),p-k) + theta^2) - (k+1)/2*log(n*lambda) "
"0","  - lchoose(p, k+1)"
"0","  return(f)"
"0","}"
"0","# log of exact marginal posterior likelihood function: -Eq.(1.1)"
"0","neg.log.exact.likelihd <- function(theta) {"
"0","  X.r = x0"
"0","  len.theta <- length(theta)"
"0","  XTheta.r <- X.r%*%as.matrix(theta) # n times 1 vector"
"0","  f = sum(y*XTheta.r - log(1+exp(XTheta.r)))- len.theta/2*log(2*pi*lambda) - "
"0","    crossprod(theta)/(2*lambda) -  lchoose(p, len.theta)"
"0","  return(-f)"
"0","}"
